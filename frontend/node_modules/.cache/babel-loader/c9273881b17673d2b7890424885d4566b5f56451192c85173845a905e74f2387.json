{"ast":null,"code":"// Servicio para manejar las reservas usando la API del backend\nconst API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5000/api\";// Función helper para manejar respuestas de la API\nconst handleApiResponse=async response=>{if(!response.ok){const errorData=await response.json().catch(()=>({}));throw new Error(errorData.message||`Error ${response.status}: ${response.statusText}`);}return await response.json();};// Función helper para obtener headers con autenticación\nconst getAuthHeaders=()=>{const token=localStorage.getItem('auth_token');return{'Content-Type':'application/json',...(token&&{'Authorization':`Bearer ${token}`})};};// Obtener todas las reservas\nexport const obtenerReservas=async()=>{try{const response=await fetch(`${API_URL}/reservas`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return result.data||[];}catch(error){console.error('Error al obtener reservas:',error);// Fallback a localStorage si hay error en la API\nreturn obtenerReservasLocalStorage();}};// Obtener reservas por fecha específica\nexport const obtenerReservasPorFecha=async fecha=>{try{const response=await fetch(`${API_URL}/reservas/fecha/${fecha}`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return result.data||[];}catch(error){console.error('Error al obtener reservas por fecha:',error);// Fallback a localStorage\nreturn obtenerReservasPorFechaLocalStorage(fecha);}};// Obtener reservas por mes\nexport const obtenerReservasPorMes=async(year,month)=>{try{const response=await fetch(`${API_URL}/reservas/mes/${year}/${month}`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return result.data||[];}catch(error){console.error('Error al obtener reservas por mes:',error);return[];}};// Verificar disponibilidad de un slot\nexport const verificarDisponibilidad=async(fecha,bloque,subBloque,dia)=>{try{var _result$data;const response=await fetch(`${API_URL}/reservas/disponibilidad/${fecha}/${bloque}/${encodeURIComponent(subBloque)}/${encodeURIComponent(dia)}`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return((_result$data=result.data)===null||_result$data===void 0?void 0:_result$data.disponible)||false;}catch(error){console.error('Error al verificar disponibilidad:',error);// Fallback a localStorage\nreturn!existeReservaEnSlotLocalStorage(fecha,dia,bloque,subBloque);}};// Función existeReservaEnSlot que usa la API\nexport const existeReservaEnSlot=async(fecha,dia,bloque,subBloque)=>{const disponible=await verificarDisponibilidad(fecha,bloque,subBloque,dia);return!disponible;};// Guardar una nueva reserva\nexport const guardarReserva=async nuevaReserva=>{try{const response=await fetch(`${API_URL}/reservas`,{method:'POST',headers:getAuthHeaders(),body:JSON.stringify(nuevaReserva)});const result=await handleApiResponse(response);return result.data||null;}catch(error){console.error('Error al guardar reserva:',error);// Fallback a localStorage\nreturn guardarReservaLocalStorage(nuevaReserva);}};// Actualizar estado de una reserva\nexport const actualizarReserva=async(id,datosActualizados)=>{try{const response=await fetch(`${API_URL}/reservas/${id}`,{method:'PUT',headers:getAuthHeaders(),body:JSON.stringify(datosActualizados)});const result=await handleApiResponse(response);return result.data||null;}catch(error){console.error('Error al actualizar reserva:',error);return null;}};// Eliminar una reserva\nexport const eliminarReserva=async id=>{try{const response=await fetch(`${API_URL}/reservas/${id}`,{method:'DELETE',headers:getAuthHeaders()});await handleApiResponse(response);return true;}catch(error){console.error('Error al eliminar reserva:',error);return false;}};// Obtener estadísticas del sistema\nexport const obtenerEstadisticas=async()=>{try{const response=await fetch(`${API_URL}/reservas/stats/general`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return result.data||{};}catch(error){console.error('Error al obtener estadísticas:',error);return{};}};// Obtener laboratorios disponibles\nexport const obtenerLaboratorios=async()=>{try{const response=await fetch(`${API_URL}/reservas/laboratorios`,{method:'GET',headers:getAuthHeaders()});const result=await handleApiResponse(response);return result.data||[];}catch(error){console.error('Error al obtener laboratorios:',error);return[];}};// Formatear datos de la reserva desde el formulario\nexport const formatearReservaDesdeFormulario=(formData,reservaSeleccionada)=>{// Determinar el laboratorio basado en la asignatura (simulación)\nconst laboratoriosPorAsignatura={'Matemáticas':'Lab. Informática 1','Física':'Lab. Física','Química':'Lab. Química','Biología':'Lab. Biología','Informática':'Lab. Informática 2','Tecnología':'Lab. Tecnología','Ciencias Naturales':'Lab. Ciencias'};return{bloque:reservaSeleccionada.bloque.id,subBloque:reservaSeleccionada.subBloque,dia:reservaSeleccionada.dia,fecha:formData.fecha,tipoBloque:formData.tipoBloque,curso:formData.curso,asignatura:formData.asignatura,profesor:formData.profesor,laboratorio:laboratoriosPorAsignatura[formData.asignatura]||'Lab. General'};};// =====================================================\n// FUNCIONES FALLBACK PARA LOCALSTORAGE\n// =====================================================\nconst RESERVAS_KEY='sistema_reservas_laboratorio';// Obtener reservas del localStorage (fallback)\nconst obtenerReservasLocalStorage=()=>{try{const reservas=localStorage.getItem(RESERVAS_KEY);return reservas?JSON.parse(reservas):[];}catch(error){console.error('Error al obtener reservas del localStorage:',error);return[];}};// Obtener reservas por fecha del localStorage (fallback)\nconst obtenerReservasPorFechaLocalStorage=fecha=>{const todasLasReservas=obtenerReservasLocalStorage();return todasLasReservas.filter(reserva=>reserva.fecha===fecha);};// Verificar si existe una reserva en un slot específico (localStorage)\nconst existeReservaEnSlotLocalStorage=(fecha,dia,bloque,subBloque)=>{const reservas=obtenerReservasPorFechaLocalStorage(fecha);return reservas.some(reserva=>reserva.dia===dia&&String(reserva.bloque)===String(bloque)&&reserva.subBloque===subBloque);};// Guardar reserva en localStorage (fallback)\nconst guardarReservaLocalStorage=nuevaReserva=>{try{const reservasExistentes=obtenerReservasLocalStorage();const reservaConId={...nuevaReserva,id:Date.now(),// ID único basado en timestamp\nfechaCreacion:new Date().toISOString(),estado:'confirmada'};const reservasActualizadas=[...reservasExistentes,reservaConId];localStorage.setItem(RESERVAS_KEY,JSON.stringify(reservasActualizadas));return reservaConId;}catch(error){console.error('Error al guardar reserva en localStorage:',error);return null;}};// Limpiar reservas del localStorage\nexport const limpiarReservas=()=>{try{localStorage.removeItem(RESERVAS_KEY);return true;}catch(error){console.error('Error al limpiar reservas:',error);return false;}};// Función para migrar datos de localStorage a la API (opcional)\nexport const migrarReservasLocalStorageAAPI=async()=>{const reservasLocal=obtenerReservasLocalStorage();try{if(reservasLocal.length===0){return{success:true,migradas:0,errores:0};}let migradas=0;let errores=0;for(const reserva of reservasLocal){try{await guardarReserva(reserva);migradas++;}catch(error){console.error('Error al migrar reserva:',reserva,error);errores++;}}// Si todas se migraron exitosamente, limpiar localStorage\nif(errores===0){limpiarReservas();}return{success:true,migradas,errores};}catch(error){console.error('Error en migración:',error);return{success:false,migradas:0,errores:(reservasLocal===null||reservasLocal===void 0?void 0:reservasLocal.length)||0};}};// Función para sincronizar offline/online (opcional)\nexport const sincronizarReservas=async()=>{try{// Intentar obtener reservas de la API\nconst reservasAPI=await obtenerReservas();// Si hay éxito, actualizar localStorage como caché\nlocalStorage.setItem(RESERVAS_KEY,JSON.stringify(reservasAPI));return{success:true,total:reservasAPI.length};}catch(error){console.error('Error en sincronización:',error);return{success:false,error:error.message};}};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","handleApiResponse","response","ok","errorData","json","catch","Error","message","status","statusText","getAuthHeaders","token","localStorage","getItem","obtenerReservas","fetch","method","headers","result","data","error","console","obtenerReservasLocalStorage","obtenerReservasPorFecha","fecha","obtenerReservasPorFechaLocalStorage","obtenerReservasPorMes","year","month","verificarDisponibilidad","bloque","subBloque","dia","_result$data","encodeURIComponent","disponible","existeReservaEnSlotLocalStorage","existeReservaEnSlot","guardarReserva","nuevaReserva","body","JSON","stringify","guardarReservaLocalStorage","actualizarReserva","id","datosActualizados","eliminarReserva","obtenerEstadisticas","obtenerLaboratorios","formatearReservaDesdeFormulario","formData","reservaSeleccionada","laboratoriosPorAsignatura","tipoBloque","curso","asignatura","profesor","laboratorio","RESERVAS_KEY","reservas","parse","todasLasReservas","filter","reserva","some","String","reservasExistentes","reservaConId","Date","now","fechaCreacion","toISOString","estado","reservasActualizadas","setItem","limpiarReservas","removeItem","migrarReservasLocalStorageAAPI","reservasLocal","length","success","migradas","errores","sincronizarReservas","reservasAPI","total"],"sources":["C:/Users/Jorge/Desktop/Reservas/frontend/src/utils/reservasService.js"],"sourcesContent":["// Servicio para manejar las reservas usando la API del backend\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Función helper para manejar respuestas de la API\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);\r\n  }\r\n  return await response.json();\r\n};\r\n\r\n// Función helper para obtener headers con autenticación\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('auth_token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// Obtener todas las reservas\r\nexport const obtenerReservas = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas:', error);\r\n    // Fallback a localStorage si hay error en la API\r\n    return obtenerReservasLocalStorage();\r\n  }\r\n};\r\n\r\n// Obtener reservas por fecha específica\r\nexport const obtenerReservasPorFecha = async (fecha) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/fecha/${fecha}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas por fecha:', error);\r\n    // Fallback a localStorage\r\n    return obtenerReservasPorFechaLocalStorage(fecha);\r\n  }\r\n};\r\n\r\n// Obtener reservas por mes\r\nexport const obtenerReservasPorMes = async (year, month) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/mes/${year}/${month}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas por mes:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Verificar disponibilidad de un slot\r\nexport const verificarDisponibilidad = async (fecha, bloque, subBloque, dia) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_URL}/reservas/disponibilidad/${fecha}/${bloque}/${encodeURIComponent(subBloque)}/${encodeURIComponent(dia)}`,\r\n      {\r\n        method: 'GET',\r\n        headers: getAuthHeaders()\r\n      }\r\n    );\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data?.disponible || false;\r\n  } catch (error) {\r\n    console.error('Error al verificar disponibilidad:', error);\r\n    // Fallback a localStorage\r\n    return !existeReservaEnSlotLocalStorage(fecha, dia, bloque, subBloque);\r\n  }\r\n};\r\n\r\n// Función existeReservaEnSlot que usa la API\r\nexport const existeReservaEnSlot = async (fecha, dia, bloque, subBloque) => {\r\n  const disponible = await verificarDisponibilidad(fecha, bloque, subBloque, dia);\r\n  return !disponible;\r\n};\r\n\r\n// Guardar una nueva reserva\r\nexport const guardarReserva = async (nuevaReserva) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(nuevaReserva)\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || null;\r\n  } catch (error) {\r\n    console.error('Error al guardar reserva:', error);\r\n    // Fallback a localStorage\r\n    return guardarReservaLocalStorage(nuevaReserva);\r\n  }\r\n};\r\n\r\n// Actualizar estado de una reserva\r\nexport const actualizarReserva = async (id, datosActualizados) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(datosActualizados)\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || null;\r\n  } catch (error) {\r\n    console.error('Error al actualizar reserva:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Eliminar una reserva\r\nexport const eliminarReserva = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    await handleApiResponse(response);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al eliminar reserva:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Obtener estadísticas del sistema\r\nexport const obtenerEstadisticas = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/stats/general`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || {};\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n// Obtener laboratorios disponibles\r\nexport const obtenerLaboratorios = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/laboratorios`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener laboratorios:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Formatear datos de la reserva desde el formulario\r\nexport const formatearReservaDesdeFormulario = (formData, reservaSeleccionada) => {\r\n  // Determinar el laboratorio basado en la asignatura (simulación)\r\n  const laboratoriosPorAsignatura = {\r\n    'Matemáticas': 'Lab. Informática 1',\r\n    'Física': 'Lab. Física',\r\n    'Química': 'Lab. Química',\r\n    'Biología': 'Lab. Biología',\r\n    'Informática': 'Lab. Informática 2',\r\n    'Tecnología': 'Lab. Tecnología',\r\n    'Ciencias Naturales': 'Lab. Ciencias'\r\n  };\r\n\r\n  return {\r\n    bloque: reservaSeleccionada.bloque.id,\r\n    subBloque: reservaSeleccionada.subBloque,\r\n    dia: reservaSeleccionada.dia,\r\n    fecha: formData.fecha,\r\n    tipoBloque: formData.tipoBloque,\r\n    curso: formData.curso,\r\n    asignatura: formData.asignatura,\r\n    profesor: formData.profesor,\r\n    laboratorio: laboratoriosPorAsignatura[formData.asignatura] || 'Lab. General'\r\n  };\r\n};\r\n\r\n// =====================================================\r\n// FUNCIONES FALLBACK PARA LOCALSTORAGE\r\n// =====================================================\r\n\r\nconst RESERVAS_KEY = 'sistema_reservas_laboratorio';\r\n\r\n// Obtener reservas del localStorage (fallback)\r\nconst obtenerReservasLocalStorage = () => {\r\n  try {\r\n    const reservas = localStorage.getItem(RESERVAS_KEY);\r\n    return reservas ? JSON.parse(reservas) : [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas del localStorage:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Obtener reservas por fecha del localStorage (fallback)\r\nconst obtenerReservasPorFechaLocalStorage = (fecha) => {\r\n  const todasLasReservas = obtenerReservasLocalStorage();\r\n  return todasLasReservas.filter(reserva => reserva.fecha === fecha);\r\n};\r\n\r\n// Verificar si existe una reserva en un slot específico (localStorage)\r\nconst existeReservaEnSlotLocalStorage = (fecha, dia, bloque, subBloque) => {\r\n  const reservas = obtenerReservasPorFechaLocalStorage(fecha);\r\n  return reservas.some(reserva => \r\n    reserva.dia === dia && \r\n    String(reserva.bloque) === String(bloque) && \r\n    reserva.subBloque === subBloque\r\n  );\r\n};\r\n\r\n// Guardar reserva en localStorage (fallback)\r\nconst guardarReservaLocalStorage = (nuevaReserva) => {\r\n  try {\r\n    const reservasExistentes = obtenerReservasLocalStorage();\r\n    const reservaConId = {\r\n      ...nuevaReserva,\r\n      id: Date.now(), // ID único basado en timestamp\r\n      fechaCreacion: new Date().toISOString(),\r\n      estado: 'confirmada'\r\n    };\r\n    \r\n    const reservasActualizadas = [...reservasExistentes, reservaConId];\r\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasActualizadas));\r\n    \r\n    return reservaConId;\r\n  } catch (error) {\r\n    console.error('Error al guardar reserva en localStorage:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Limpiar reservas del localStorage\r\nexport const limpiarReservas = () => {\r\n  try {\r\n    localStorage.removeItem(RESERVAS_KEY);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al limpiar reservas:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para migrar datos de localStorage a la API (opcional)\r\nexport const migrarReservasLocalStorageAAPI = async () => {\r\n  const reservasLocal = obtenerReservasLocalStorage();\r\n  \r\n  try {\r\n    if (reservasLocal.length === 0) {\r\n      return { success: true, migradas: 0, errores: 0 };\r\n    }\r\n\r\n    let migradas = 0;\r\n    let errores = 0;\r\n\r\n    for (const reserva of reservasLocal) {\r\n      try {\r\n        await guardarReserva(reserva);\r\n        migradas++;\r\n      } catch (error) {\r\n        console.error('Error al migrar reserva:', reserva, error);\r\n        errores++;\r\n      }\r\n    }\r\n\r\n    // Si todas se migraron exitosamente, limpiar localStorage\r\n    if (errores === 0) {\r\n      limpiarReservas();\r\n    }\r\n\r\n    return { success: true, migradas, errores };\r\n  } catch (error) {\r\n    console.error('Error en migración:', error);\r\n    return { success: false, migradas: 0, errores: reservasLocal?.length || 0 };\r\n  }\r\n};\r\n\r\n// Función para sincronizar offline/online (opcional)\r\nexport const sincronizarReservas = async () => {\r\n  try {\r\n    // Intentar obtener reservas de la API\r\n    const reservasAPI = await obtenerReservas();\r\n    \r\n    // Si hay éxito, actualizar localStorage como caché\r\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasAPI));\r\n    \r\n    return { success: true, total: reservasAPI.length };\r\n  } catch (error) {\r\n    console.error('Error en sincronización:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}