{"ast":null,"code":"// Servicio para manejar las reservas usando la API del backend\n\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Función helper para manejar respuestas de la API\nconst handleApiResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);\n  }\n  return await response.json();\n};\n\n// Función helper para obtener headers con autenticación\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('auth_token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Obtener todas las reservas\nexport const obtenerReservas = async () => {\n  try {\n    const response = await fetch(`${API_URL}/reservas`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return result.data || [];\n  } catch (error) {\n    console.error('Error al obtener reservas:', error);\n    // Fallback a localStorage si hay error en la API\n    return obtenerReservasLocalStorage();\n  }\n};\n\n// Obtener reservas por fecha específica\nexport const obtenerReservasPorFecha = async fecha => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/fecha/${fecha}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return result.data || [];\n  } catch (error) {\n    console.error('Error al obtener reservas por fecha:', error);\n    // Fallback a localStorage\n    return obtenerReservasPorFechaLocalStorage(fecha);\n  }\n};\n\n// Obtener reservas por mes\nexport const obtenerReservasPorMes = async (year, month) => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/mes/${year}/${month}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return result.data || [];\n  } catch (error) {\n    console.error('Error al obtener reservas por mes:', error);\n    return [];\n  }\n};\n\n// Verificar disponibilidad de un slot\nexport const verificarDisponibilidad = async (fecha, bloque, subBloque, dia) => {\n  try {\n    var _result$data;\n    const response = await fetch(`${API_URL}/reservas/disponibilidad/${fecha}/${bloque}/${encodeURIComponent(subBloque)}/${encodeURIComponent(dia)}`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return ((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.disponible) || false;\n  } catch (error) {\n    console.error('Error al verificar disponibilidad:', error);\n    // Fallback a localStorage\n    return !existeReservaEnSlotLocalStorage(fecha, dia, bloque, subBloque);\n  }\n};\n\n// Función existeReservaEnSlot que usa la API\nexport const existeReservaEnSlot = async (fecha, dia, bloque, subBloque) => {\n  const disponible = await verificarDisponibilidad(fecha, bloque, subBloque, dia);\n  return !disponible;\n};\n\n// Guardar una nueva reserva\nexport const guardarReserva = async nuevaReserva => {\n  try {\n    const response = await fetch(`${API_URL}/reservas`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(nuevaReserva)\n    });\n    const result = await handleApiResponse(response);\n    return result.data || null;\n  } catch (error) {\n    console.error('Error al guardar reserva:', error);\n    // Fallback a localStorage\n    return guardarReservaLocalStorage(nuevaReserva);\n  }\n};\n\n// Actualizar estado de una reserva\nexport const actualizarReserva = async (id, datosActualizados) => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(datosActualizados)\n    });\n    const result = await handleApiResponse(response);\n    return result.data || null;\n  } catch (error) {\n    console.error('Error al actualizar reserva:', error);\n    return null;\n  }\n};\n\n// Eliminar una reserva\nexport const eliminarReserva = async id => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    await handleApiResponse(response);\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return false;\n  }\n};\n\n// Obtener estadísticas del sistema\nexport const obtenerEstadisticas = async () => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/stats/general`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return result.data || {};\n  } catch (error) {\n    console.error('Error al obtener estadísticas:', error);\n    return {};\n  }\n};\n\n// Obtener laboratorios disponibles\nexport const obtenerLaboratorios = async () => {\n  try {\n    const response = await fetch(`${API_URL}/reservas/laboratorios`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    const result = await handleApiResponse(response);\n    return result.data || [];\n  } catch (error) {\n    console.error('Error al obtener laboratorios:', error);\n    return [];\n  }\n};\n\n// Formatear datos de la reserva desde el formulario\nexport const formatearReservaDesdeFormulario = (formData, reservaSeleccionada) => {\n  // Determinar el laboratorio basado en la asignatura (simulación)\n  const laboratoriosPorAsignatura = {\n    'Matemáticas': 'Lab. Informática 1',\n    'Física': 'Lab. Física',\n    'Química': 'Lab. Química',\n    'Biología': 'Lab. Biología',\n    'Informática': 'Lab. Informática 2',\n    'Tecnología': 'Lab. Tecnología',\n    'Ciencias Naturales': 'Lab. Ciencias'\n  };\n  return {\n    bloque: reservaSeleccionada.bloque.id,\n    subBloque: reservaSeleccionada.subBloque,\n    dia: reservaSeleccionada.dia,\n    fecha: formData.fecha,\n    tipoBloque: formData.tipoBloque,\n    curso: formData.curso,\n    asignatura: formData.asignatura,\n    profesor: formData.profesor,\n    laboratorio: laboratoriosPorAsignatura[formData.asignatura] || 'Lab. General'\n  };\n};\n\n// =====================================================\n// FUNCIONES FALLBACK PARA LOCALSTORAGE\n// =====================================================\n\nconst RESERVAS_KEY = 'sistema_reservas_laboratorio';\n\n// Obtener reservas del localStorage (fallback)\nconst obtenerReservasLocalStorage = () => {\n  try {\n    const reservas = localStorage.getItem(RESERVAS_KEY);\n    return reservas ? JSON.parse(reservas) : [];\n  } catch (error) {\n    console.error('Error al obtener reservas del localStorage:', error);\n    return [];\n  }\n};\n\n// Obtener reservas por fecha del localStorage (fallback)\nconst obtenerReservasPorFechaLocalStorage = fecha => {\n  const todasLasReservas = obtenerReservasLocalStorage();\n  return todasLasReservas.filter(reserva => reserva.fecha === fecha);\n};\n\n// Verificar si existe una reserva en un slot específico (localStorage)\nconst existeReservaEnSlotLocalStorage = (fecha, dia, bloque, subBloque) => {\n  const reservas = obtenerReservasPorFechaLocalStorage(fecha);\n  return reservas.some(reserva => reserva.dia === dia && String(reserva.bloque) === String(bloque) && reserva.subBloque === subBloque);\n};\n\n// Guardar reserva en localStorage (fallback)\nconst guardarReservaLocalStorage = nuevaReserva => {\n  try {\n    const reservasExistentes = obtenerReservasLocalStorage();\n    const reservaConId = {\n      ...nuevaReserva,\n      id: Date.now(),\n      // ID único basado en timestamp\n      fechaCreacion: new Date().toISOString(),\n      estado: 'confirmada'\n    };\n    const reservasActualizadas = [...reservasExistentes, reservaConId];\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasActualizadas));\n    return reservaConId;\n  } catch (error) {\n    console.error('Error al guardar reserva en localStorage:', error);\n    return null;\n  }\n};\n\n// Limpiar reservas del localStorage\nexport const limpiarReservas = () => {\n  try {\n    localStorage.removeItem(RESERVAS_KEY);\n    return true;\n  } catch (error) {\n    console.error('Error al limpiar reservas:', error);\n    return false;\n  }\n};\n\n// Función para migrar datos de localStorage a la API (opcional)\nexport const migrarReservasLocalStorageAAPI = async () => {\n  const reservasLocal = obtenerReservasLocalStorage();\n  try {\n    if (reservasLocal.length === 0) {\n      return {\n        success: true,\n        migradas: 0,\n        errores: 0\n      };\n    }\n    let migradas = 0;\n    let errores = 0;\n    for (const reserva of reservasLocal) {\n      try {\n        await guardarReserva(reserva);\n        migradas++;\n      } catch (error) {\n        console.error('Error al migrar reserva:', reserva, error);\n        errores++;\n      }\n    }\n\n    // Si todas se migraron exitosamente, limpiar localStorage\n    if (errores === 0) {\n      limpiarReservas();\n    }\n    return {\n      success: true,\n      migradas,\n      errores\n    };\n  } catch (error) {\n    console.error('Error en migración:', error);\n    return {\n      success: false,\n      migradas: 0,\n      errores: (reservasLocal === null || reservasLocal === void 0 ? void 0 : reservasLocal.length) || 0\n    };\n  }\n};\n\n// Función para sincronizar offline/online (opcional)\nexport const sincronizarReservas = async () => {\n  try {\n    // Intentar obtener reservas de la API\n    const reservasAPI = await obtenerReservas();\n\n    // Si hay éxito, actualizar localStorage como caché\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasAPI));\n    return {\n      success: true,\n      total: reservasAPI.length\n    };\n  } catch (error) {\n    console.error('Error en sincronización:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","handleApiResponse","response","ok","errorData","json","catch","Error","message","status","statusText","getAuthHeaders","token","localStorage","getItem","obtenerReservas","fetch","method","headers","result","data","error","console","obtenerReservasLocalStorage","obtenerReservasPorFecha","fecha","obtenerReservasPorFechaLocalStorage","obtenerReservasPorMes","year","month","verificarDisponibilidad","bloque","subBloque","dia","_result$data","encodeURIComponent","disponible","existeReservaEnSlotLocalStorage","existeReservaEnSlot","guardarReserva","nuevaReserva","body","JSON","stringify","guardarReservaLocalStorage","actualizarReserva","id","datosActualizados","eliminarReserva","obtenerEstadisticas","obtenerLaboratorios","formatearReservaDesdeFormulario","formData","reservaSeleccionada","laboratoriosPorAsignatura","tipoBloque","curso","asignatura","profesor","laboratorio","RESERVAS_KEY","reservas","parse","todasLasReservas","filter","reserva","some","String","reservasExistentes","reservaConId","Date","now","fechaCreacion","toISOString","estado","reservasActualizadas","setItem","limpiarReservas","removeItem","migrarReservasLocalStorageAAPI","reservasLocal","length","success","migradas","errores","sincronizarReservas","reservasAPI","total"],"sources":["C:/Users/Jorge/Desktop/Reservas/frontend/src/utils/reservasService.js"],"sourcesContent":["// Servicio para manejar las reservas usando la API del backend\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Función helper para manejar respuestas de la API\r\nconst handleApiResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);\r\n  }\r\n  return await response.json();\r\n};\r\n\r\n// Función helper para obtener headers con autenticación\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('auth_token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// Obtener todas las reservas\r\nexport const obtenerReservas = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas:', error);\r\n    // Fallback a localStorage si hay error en la API\r\n    return obtenerReservasLocalStorage();\r\n  }\r\n};\r\n\r\n// Obtener reservas por fecha específica\r\nexport const obtenerReservasPorFecha = async (fecha) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/fecha/${fecha}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas por fecha:', error);\r\n    // Fallback a localStorage\r\n    return obtenerReservasPorFechaLocalStorage(fecha);\r\n  }\r\n};\r\n\r\n// Obtener reservas por mes\r\nexport const obtenerReservasPorMes = async (year, month) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/mes/${year}/${month}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas por mes:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Verificar disponibilidad de un slot\r\nexport const verificarDisponibilidad = async (fecha, bloque, subBloque, dia) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${API_URL}/reservas/disponibilidad/${fecha}/${bloque}/${encodeURIComponent(subBloque)}/${encodeURIComponent(dia)}`,\r\n      {\r\n        method: 'GET',\r\n        headers: getAuthHeaders()\r\n      }\r\n    );\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data?.disponible || false;\r\n  } catch (error) {\r\n    console.error('Error al verificar disponibilidad:', error);\r\n    // Fallback a localStorage\r\n    return !existeReservaEnSlotLocalStorage(fecha, dia, bloque, subBloque);\r\n  }\r\n};\r\n\r\n// Función existeReservaEnSlot que usa la API\r\nexport const existeReservaEnSlot = async (fecha, dia, bloque, subBloque) => {\r\n  const disponible = await verificarDisponibilidad(fecha, bloque, subBloque, dia);\r\n  return !disponible;\r\n};\r\n\r\n// Guardar una nueva reserva\r\nexport const guardarReserva = async (nuevaReserva) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(nuevaReserva)\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || null;\r\n  } catch (error) {\r\n    console.error('Error al guardar reserva:', error);\r\n    // Fallback a localStorage\r\n    return guardarReservaLocalStorage(nuevaReserva);\r\n  }\r\n};\r\n\r\n// Actualizar estado de una reserva\r\nexport const actualizarReserva = async (id, datosActualizados) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\r\n      method: 'PUT',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(datosActualizados)\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || null;\r\n  } catch (error) {\r\n    console.error('Error al actualizar reserva:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Eliminar una reserva\r\nexport const eliminarReserva = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/${id}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    await handleApiResponse(response);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al eliminar reserva:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Obtener estadísticas del sistema\r\nexport const obtenerEstadisticas = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/stats/general`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || {};\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n// Obtener laboratorios disponibles\r\nexport const obtenerLaboratorios = async () => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/reservas/laboratorios`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n    \r\n    const result = await handleApiResponse(response);\r\n    return result.data || [];\r\n  } catch (error) {\r\n    console.error('Error al obtener laboratorios:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Formatear datos de la reserva desde el formulario\r\nexport const formatearReservaDesdeFormulario = (formData, reservaSeleccionada) => {\r\n  // Determinar el laboratorio basado en la asignatura (simulación)\r\n  const laboratoriosPorAsignatura = {\r\n    'Matemáticas': 'Lab. Informática 1',\r\n    'Física': 'Lab. Física',\r\n    'Química': 'Lab. Química',\r\n    'Biología': 'Lab. Biología',\r\n    'Informática': 'Lab. Informática 2',\r\n    'Tecnología': 'Lab. Tecnología',\r\n    'Ciencias Naturales': 'Lab. Ciencias'\r\n  };\r\n\r\n  return {\r\n    bloque: reservaSeleccionada.bloque.id,\r\n    subBloque: reservaSeleccionada.subBloque,\r\n    dia: reservaSeleccionada.dia,\r\n    fecha: formData.fecha,\r\n    tipoBloque: formData.tipoBloque,\r\n    curso: formData.curso,\r\n    asignatura: formData.asignatura,\r\n    profesor: formData.profesor,\r\n    laboratorio: laboratoriosPorAsignatura[formData.asignatura] || 'Lab. General'\r\n  };\r\n};\r\n\r\n// =====================================================\r\n// FUNCIONES FALLBACK PARA LOCALSTORAGE\r\n// =====================================================\r\n\r\nconst RESERVAS_KEY = 'sistema_reservas_laboratorio';\r\n\r\n// Obtener reservas del localStorage (fallback)\r\nconst obtenerReservasLocalStorage = () => {\r\n  try {\r\n    const reservas = localStorage.getItem(RESERVAS_KEY);\r\n    return reservas ? JSON.parse(reservas) : [];\r\n  } catch (error) {\r\n    console.error('Error al obtener reservas del localStorage:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Obtener reservas por fecha del localStorage (fallback)\r\nconst obtenerReservasPorFechaLocalStorage = (fecha) => {\r\n  const todasLasReservas = obtenerReservasLocalStorage();\r\n  return todasLasReservas.filter(reserva => reserva.fecha === fecha);\r\n};\r\n\r\n// Verificar si existe una reserva en un slot específico (localStorage)\r\nconst existeReservaEnSlotLocalStorage = (fecha, dia, bloque, subBloque) => {\r\n  const reservas = obtenerReservasPorFechaLocalStorage(fecha);\r\n  return reservas.some(reserva => \r\n    reserva.dia === dia && \r\n    String(reserva.bloque) === String(bloque) && \r\n    reserva.subBloque === subBloque\r\n  );\r\n};\r\n\r\n// Guardar reserva en localStorage (fallback)\r\nconst guardarReservaLocalStorage = (nuevaReserva) => {\r\n  try {\r\n    const reservasExistentes = obtenerReservasLocalStorage();\r\n    const reservaConId = {\r\n      ...nuevaReserva,\r\n      id: Date.now(), // ID único basado en timestamp\r\n      fechaCreacion: new Date().toISOString(),\r\n      estado: 'confirmada'\r\n    };\r\n    \r\n    const reservasActualizadas = [...reservasExistentes, reservaConId];\r\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasActualizadas));\r\n    \r\n    return reservaConId;\r\n  } catch (error) {\r\n    console.error('Error al guardar reserva en localStorage:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Limpiar reservas del localStorage\r\nexport const limpiarReservas = () => {\r\n  try {\r\n    localStorage.removeItem(RESERVAS_KEY);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al limpiar reservas:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Función para migrar datos de localStorage a la API (opcional)\r\nexport const migrarReservasLocalStorageAAPI = async () => {\r\n  const reservasLocal = obtenerReservasLocalStorage();\r\n  \r\n  try {\r\n    if (reservasLocal.length === 0) {\r\n      return { success: true, migradas: 0, errores: 0 };\r\n    }\r\n\r\n    let migradas = 0;\r\n    let errores = 0;\r\n\r\n    for (const reserva of reservasLocal) {\r\n      try {\r\n        await guardarReserva(reserva);\r\n        migradas++;\r\n      } catch (error) {\r\n        console.error('Error al migrar reserva:', reserva, error);\r\n        errores++;\r\n      }\r\n    }\r\n\r\n    // Si todas se migraron exitosamente, limpiar localStorage\r\n    if (errores === 0) {\r\n      limpiarReservas();\r\n    }\r\n\r\n    return { success: true, migradas, errores };\r\n  } catch (error) {\r\n    console.error('Error en migración:', error);\r\n    return { success: false, migradas: 0, errores: reservasLocal?.length || 0 };\r\n  }\r\n};\r\n\r\n// Función para sincronizar offline/online (opcional)\r\nexport const sincronizarReservas = async () => {\r\n  try {\r\n    // Intentar obtener reservas de la API\r\n    const reservasAPI = await obtenerReservas();\r\n    \r\n    // Si hay éxito, actualizar localStorage como caché\r\n    localStorage.setItem(RESERVAS_KEY, JSON.stringify(reservasAPI));\r\n    \r\n    return { success: true, total: reservasAPI.length };\r\n  } catch (error) {\r\n    console.error('Error en sincronización:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n}; "],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,OAAO,IAAI,SAASN,QAAQ,CAACO,MAAM,KAAKP,QAAQ,CAACQ,UAAU,EAAE,CAAC;EAC1F;EACA,OAAO,MAAMR,QAAQ,CAACG,IAAI,CAAC,CAAC;AAC9B,CAAC;;AAED;AACA,MAAMM,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,OAAO;IACL,cAAc,EAAE,kBAAkB;IAClC,IAAIF,KAAK,IAAI;MAAE,eAAe,EAAE,UAAUA,KAAK;IAAG,CAAC;EACrD,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,WAAW,EAAE;MAClDoB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,EAAE;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;IACA,OAAOE,2BAA2B,CAAC,CAAC;EACtC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,KAAK,IAAK;EACtD,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,mBAAmB4B,KAAK,EAAE,EAAE;MACjER,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,EAAE;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D;IACA,OAAOK,mCAAmC,CAACD,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AACA,OAAO,MAAME,qBAAqB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,KAAK;EAC1D,IAAI;IACF,MAAM3B,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,iBAAiB+B,IAAI,IAAIC,KAAK,EAAE,EAAE;MACvEZ,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,EAAE;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,uBAAuB,GAAG,MAAAA,CAAOL,KAAK,EAAEM,MAAM,EAAEC,SAAS,EAAEC,GAAG,KAAK;EAC9E,IAAI;IAAA,IAAAC,YAAA;IACF,MAAMhC,QAAQ,GAAG,MAAMc,KAAK,CAC1B,GAAGnB,OAAO,4BAA4B4B,KAAK,IAAIM,MAAM,IAAII,kBAAkB,CAACH,SAAS,CAAC,IAAIG,kBAAkB,CAACF,GAAG,CAAC,EAAE,EACnH;MACEhB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CACF,CAAC;IAED,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAO,EAAAgC,YAAA,GAAAf,MAAM,CAACC,IAAI,cAAAc,YAAA,uBAAXA,YAAA,CAAaE,UAAU,KAAI,KAAK;EACzC,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D;IACA,OAAO,CAACgB,+BAA+B,CAACZ,KAAK,EAAEQ,GAAG,EAAEF,MAAM,EAAEC,SAAS,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,mBAAmB,GAAG,MAAAA,CAAOb,KAAK,EAAEQ,GAAG,EAAEF,MAAM,EAAEC,SAAS,KAAK;EAC1E,MAAMI,UAAU,GAAG,MAAMN,uBAAuB,CAACL,KAAK,EAAEM,MAAM,EAAEC,SAAS,EAAEC,GAAG,CAAC;EAC/E,OAAO,CAACG,UAAU;AACpB,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IACF,MAAMtC,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,WAAW,EAAE;MAClDoB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEP,cAAc,CAAC,CAAC;MACzB8B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,YAAY;IACnC,CAAC,CAAC;IAEF,MAAMrB,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,IAAI;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD;IACA,OAAOuB,0BAA0B,CAACJ,YAAY,CAAC;EACjD;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,iBAAiB,KAAK;EAChE,IAAI;IACF,MAAM7C,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,aAAaiD,EAAE,EAAE,EAAE;MACxD7B,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC,CAAC;MACzB8B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,iBAAiB;IACxC,CAAC,CAAC;IAEF,MAAM5B,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,IAAI;EAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAM2B,eAAe,GAAG,MAAOF,EAAE,IAAK;EAC3C,IAAI;IACF,MAAM5C,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,aAAaiD,EAAE,EAAE,EAAE;MACxD7B,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMV,iBAAiB,CAACC,QAAQ,CAAC;IACjC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAM4B,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAM/C,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,yBAAyB,EAAE;MAChEoB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAM6B,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMhD,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,OAAO,wBAAwB,EAAE;MAC/DoB,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEP,cAAc,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMQ,MAAM,GAAG,MAAMlB,iBAAiB,CAACC,QAAQ,CAAC;IAChD,OAAOiB,MAAM,CAACC,IAAI,IAAI,EAAE;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAM8B,+BAA+B,GAAGA,CAACC,QAAQ,EAAEC,mBAAmB,KAAK;EAChF;EACA,MAAMC,yBAAyB,GAAG;IAChC,aAAa,EAAE,oBAAoB;IACnC,QAAQ,EAAE,aAAa;IACvB,SAAS,EAAE,cAAc;IACzB,UAAU,EAAE,eAAe;IAC3B,aAAa,EAAE,oBAAoB;IACnC,YAAY,EAAE,iBAAiB;IAC/B,oBAAoB,EAAE;EACxB,CAAC;EAED,OAAO;IACLvB,MAAM,EAAEsB,mBAAmB,CAACtB,MAAM,CAACe,EAAE;IACrCd,SAAS,EAAEqB,mBAAmB,CAACrB,SAAS;IACxCC,GAAG,EAAEoB,mBAAmB,CAACpB,GAAG;IAC5BR,KAAK,EAAE2B,QAAQ,CAAC3B,KAAK;IACrB8B,UAAU,EAAEH,QAAQ,CAACG,UAAU;IAC/BC,KAAK,EAAEJ,QAAQ,CAACI,KAAK;IACrBC,UAAU,EAAEL,QAAQ,CAACK,UAAU;IAC/BC,QAAQ,EAAEN,QAAQ,CAACM,QAAQ;IAC3BC,WAAW,EAAEL,yBAAyB,CAACF,QAAQ,CAACK,UAAU,CAAC,IAAI;EACjE,CAAC;AACH,CAAC;;AAED;AACA;AACA;;AAEA,MAAMG,YAAY,GAAG,8BAA8B;;AAEnD;AACA,MAAMrC,2BAA2B,GAAGA,CAAA,KAAM;EACxC,IAAI;IACF,MAAMsC,QAAQ,GAAGhD,YAAY,CAACC,OAAO,CAAC8C,YAAY,CAAC;IACnD,OAAOC,QAAQ,GAAGnB,IAAI,CAACoB,KAAK,CAACD,QAAQ,CAAC,GAAG,EAAE;EAC7C,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAMK,mCAAmC,GAAID,KAAK,IAAK;EACrD,MAAMsC,gBAAgB,GAAGxC,2BAA2B,CAAC,CAAC;EACtD,OAAOwC,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACxC,KAAK,KAAKA,KAAK,CAAC;AACpE,CAAC;;AAED;AACA,MAAMY,+BAA+B,GAAGA,CAACZ,KAAK,EAAEQ,GAAG,EAAEF,MAAM,EAAEC,SAAS,KAAK;EACzE,MAAM6B,QAAQ,GAAGnC,mCAAmC,CAACD,KAAK,CAAC;EAC3D,OAAOoC,QAAQ,CAACK,IAAI,CAACD,OAAO,IAC1BA,OAAO,CAAChC,GAAG,KAAKA,GAAG,IACnBkC,MAAM,CAACF,OAAO,CAAClC,MAAM,CAAC,KAAKoC,MAAM,CAACpC,MAAM,CAAC,IACzCkC,OAAO,CAACjC,SAAS,KAAKA,SACxB,CAAC;AACH,CAAC;;AAED;AACA,MAAMY,0BAA0B,GAAIJ,YAAY,IAAK;EACnD,IAAI;IACF,MAAM4B,kBAAkB,GAAG7C,2BAA2B,CAAC,CAAC;IACxD,MAAM8C,YAAY,GAAG;MACnB,GAAG7B,YAAY;MACfM,EAAE,EAAEwB,IAAI,CAACC,GAAG,CAAC,CAAC;MAAE;MAChBC,aAAa,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;MACvCC,MAAM,EAAE;IACV,CAAC;IAED,MAAMC,oBAAoB,GAAG,CAAC,GAAGP,kBAAkB,EAAEC,YAAY,CAAC;IAClExD,YAAY,CAAC+D,OAAO,CAAChB,YAAY,EAAElB,IAAI,CAACC,SAAS,CAACgC,oBAAoB,CAAC,CAAC;IAExE,OAAON,YAAY;EACrB,CAAC,CAAC,OAAOhD,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMwD,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI;IACFhE,YAAY,CAACiE,UAAU,CAAClB,YAAY,CAAC;IACrC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOvC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAM0D,8BAA8B,GAAG,MAAAA,CAAA,KAAY;EACxD,MAAMC,aAAa,GAAGzD,2BAA2B,CAAC,CAAC;EAEnD,IAAI;IACF,IAAIyD,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO;QAAEC,OAAO,EAAE,IAAI;QAAEC,QAAQ,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAE,CAAC;IACnD;IAEA,IAAID,QAAQ,GAAG,CAAC;IAChB,IAAIC,OAAO,GAAG,CAAC;IAEf,KAAK,MAAMnB,OAAO,IAAIe,aAAa,EAAE;MACnC,IAAI;QACF,MAAMzC,cAAc,CAAC0B,OAAO,CAAC;QAC7BkB,QAAQ,EAAE;MACZ,CAAC,CAAC,OAAO9D,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAE4C,OAAO,EAAE5C,KAAK,CAAC;QACzD+D,OAAO,EAAE;MACX;IACF;;IAEA;IACA,IAAIA,OAAO,KAAK,CAAC,EAAE;MACjBP,eAAe,CAAC,CAAC;IACnB;IAEA,OAAO;MAAEK,OAAO,EAAE,IAAI;MAAEC,QAAQ;MAAEC;IAAQ,CAAC;EAC7C,CAAC,CAAC,OAAO/D,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MAAE6D,OAAO,EAAE,KAAK;MAAEC,QAAQ,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAAJ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,MAAM,KAAI;IAAE,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAMvE,eAAe,CAAC,CAAC;;IAE3C;IACAF,YAAY,CAAC+D,OAAO,CAAChB,YAAY,EAAElB,IAAI,CAACC,SAAS,CAAC2C,WAAW,CAAC,CAAC;IAE/D,OAAO;MAAEJ,OAAO,EAAE,IAAI;MAAEK,KAAK,EAAED,WAAW,CAACL;IAAO,CAAC;EACrD,CAAC,CAAC,OAAO5D,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO;MAAE6D,OAAO,EAAE,KAAK;MAAE7D,KAAK,EAAEA,KAAK,CAACb;IAAQ,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}